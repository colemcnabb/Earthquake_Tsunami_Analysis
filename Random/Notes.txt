## Data Cleaning

Steps to clean Data
1) Remove Duplicates
2) Standardize the data 
3) Null or blank values
4) Remove columns or rows that aren't necessary
5) Create a raw data set before processing data (precautionary)

# Started with the EarthquakeData first and then a simple copy and paste for the queries on the tsunamiData 
Fogot to change columns earlier in the importing process so a little annoying now

Added an underscore to all column names and removed the space

Learned how to create procedures insstead of always writing out the same code

(in mySQL)

CREATE PRODECURE name_of_procedure()
BEGIN
    ## query you want here ;
END;

Then use it with:

CALL name_of_procedure;

Changed all columns to lower case

Deleted NULL first row

Dropped all the redundant columns (all _description columns and the tsu, vol columns)

Fixed the time and date formatting by combining the year, mo, dy columns for date,
and then combining the hr,mn,sec columns for time

Shuffled these columns (date and time) to the front of the table for readability

##Stopping for the day.  Tomorrow , start off by:
    1) decide on NULL values and if I should remove with a certain % of null values
    2) create a backup DB before dropping the individual time / date columns (year, mo, dy , hr , mn , sec)
    3) Change location name to Country and city? or worry about longitude and latitude only ? 
    4) Finish clean up (duplicates, any other null values etc!)
    5) Apply essentially the same changes to the tsunami dataset and get to querying

Thoughts when cleaning today:
- When to drop data with NULL values?
- Some data wasn't recorded as often earlier on as it is the latter 40 years of data recording
- Some columns have total_houses_damaged but then the total_damage_price is NULL, what is the point of keeping these columns? 

- Should've dropped majority of the columns earlier rather than formatting them first but oh well. 
- 
Going to apply the same steps to the tsunami data now, but also considering removing unnecessary columns 

- Very confusing when spiltting the location_name column into a country.  I might focus on lat / long instead of the country column 
- Would like to ask a professional how they would approach this situation
- Dropping the country column.  The time required doesn't make sense, given my strict deadlines
- If someone doesn't like it, then I will take their advice on how I would proceed in the future


## Working on the earthquake analysis and answering questions related to: time, geographics, and impact

-- If we drop columns with >= 75% null values then we drop:
	## missing, damage_price, houses_destroyed, houses_damaged, total_missing,
	## total_damage_price, total_houses_destroyed, total_houses_damaged

-- Won't be using the house information for the analysis
-- Dropping time / date related columns becuase alredy fixed them in new event_date / time columns
-- Dropping columns with ~%75 NULL values.  This data proves to be irrelevant in the analysis process and won't provide any important insights

## Now before fixing columns, drop same columns from Earthquake dataset


## Dropping redundant data, similar to the earthquake data set.  Potentially dropping more later. Inefficient, should've been formatted like 
## ALTER TABLE TsunamiData followed by drop columns, instead of the alter table call this many times